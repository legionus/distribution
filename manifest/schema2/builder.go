package schema2

import (
	"fmt"

	"github.com/docker/distribution"
	"github.com/docker/distribution/context"
)

// ImageType for the Manifest to be built
type ImageType int

// The following are enumerations of image types
const (
	DockerImageType ImageType = iota
	OciImageType
)

// builder is a type for constructing manifests.
type builder struct {
	// bs is a BlobService used to publish the configuration blob.
	bs distribution.BlobService

	// configJSON references
	configJSON []byte

	// layers is a list of layer descriptors that gets built by successive
	// calls to AppendReference.
	layers []distribution.Descriptor

	// imageType represented the type of manifest generated by this builder.
	// Should be one of DockerBuilder or OCIBuilder.
	imageType ImageType
}

// NewManifestBuilder is used to build new manifests for the current schema
// version. It takes a BlobService so it can publish the configuration blob as
// part of the Build process. imageType specified whether this builder will
// generate docker manifests or OCI manifests, and should be one of
// DockerBuilder or OCIBuilder.
func NewManifestBuilder(bs distribution.BlobService, configJSON []byte, imageType ImageType) distribution.ManifestBuilder {
	mb := &builder{
		bs:         bs,
		configJSON: make([]byte, len(configJSON)),
		imageType:  imageType,
	}
	copy(mb.configJSON, configJSON)

	return mb
}

// Build produces a final manifest from the given references.
func (mb *builder) Build(ctx context.Context) (distribution.Manifest, error) {
	m := Manifest{
		Versioned: SchemaVersion,
		Layers:    make([]distribution.Descriptor, len(mb.layers)),
	}
	copy(m.Layers, mb.layers)

	fmt.Printf("\n\nbuilding image type %d\n\n\n", mb.imageType)

	// Add config to the blob store
	var configType string
	switch mb.imageType {
	case DockerImageType:
		configType = MediaTypeConfig
	case OciImageType:
		configType = MediaTypeOCIConfig
	}

	var err error
	m.Config, err = mb.bs.Put(ctx, configType, mb.configJSON)
	if err != nil {
		return nil, err
	}

	switch mb.imageType {
	case DockerImageType:
		m.MediaType = MediaTypeManifest
		m.Config.MediaType = MediaTypeConfig
		for _, l := range m.Layers {
			l.MediaType = MediaTypeLayer
		}
	case OciImageType:
		m.MediaType = MediaTypeOCIManifest
		m.Config.MediaType = MediaTypeOCIConfig
		for _, l := range m.Layers {
			l.MediaType = MediaTypeOCILayer
		}
	}

	fmt.Printf("\n\ndone building\n\n\n")

	return FromStruct(m)
}

// AppendReference adds a reference to the current ManifestBuilder.
func (mb *builder) AppendReference(d distribution.Describable) error {
	mb.layers = append(mb.layers, d.Descriptor())
	return nil
}

// References returns the current references added to this builder.
func (mb *builder) References() []distribution.Descriptor {
	return mb.layers
}
